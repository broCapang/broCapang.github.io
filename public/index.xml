<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Irfan Haziq&#39;s Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Irfan Haziq&#39;s Site</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Feb 2025 17:20:36 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pwnable.tw Hacknote</title>
      <link>http://localhost:1313/posts/pwnabletw-hacknote/</link>
      <pubDate>Thu, 13 Feb 2025 17:20:36 +0800</pubDate>
      <guid>http://localhost:1313/posts/pwnabletw-hacknote/</guid>
      <description>&lt;p&gt;This challenge involves exploiting Use-After-Free vulnerability. The note structure in this challenge stores &lt;code&gt;puts&lt;/code&gt; function pointer besides the note content pointer. By properly allocating and free-ing memory, full control on EIP will be achieved.&lt;/p&gt;
&lt;h1 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h1&gt;
&lt;p&gt;The challenge provide 2 files, hacknote (the challenge binary) and libc_32.so.6 (the libc used in this challenge)&lt;/p&gt;
&lt;h2 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file hacknote 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hacknote: ELF 32-bit LSB executable, Intel 80386, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter ./ld-2.23.so, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.32, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;a32de99816727a2ffa1fe5f4a324238b2d59a606, stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file libc_32.so.6 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_32.so.6: ELF 32-bit LSB shared object, Intel 80386, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GNU/Linux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;d26149b8dc15c0c3ea8a5316583757f69b39e037, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.32, stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Security Mitigations:&lt;/p&gt;</description>
    </item>
    <item>
      <title>pwnable.tw Dubblesort</title>
      <link>http://localhost:1313/posts/pwnabletw-dubblesort/</link>
      <pubDate>Sat, 08 Feb 2025 00:45:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/pwnabletw-dubblesort/</guid>
      <description>&lt;p&gt;This challenge leverages the behavior of the %s format specifier, which prints characters until it encounters a null terminator (\x00). By exploiting this property, it is possible to leak information about the libc base address. Additionally, the program contains an out-of-bounds (OOB) write operation; however, the writes are automatically sorted in ascending order.&lt;/p&gt;
&lt;h1 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h1&gt;
&lt;h2 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file dubblesort 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dubblesort: ELF 32-bit LSB shared object, Intel 80386, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter ./ld-2.23.so, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.24, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;/images/pwnabletw-dubblesort/&lt;span style=&#34;color:#f92672&#34;&gt;)=&lt;/span&gt;12a217baf7cbdf2bb5c344ff14adcf7703672fb1, stripped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file libc_32.so.6 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_32.so.6: ELF 32-bit LSB shared object, Intel 80386, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GNU/Linux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;](&lt;/span&gt;/images/pwnabletw-dubblesort/&lt;span style=&#34;color:#f92672&#34;&gt;)=&lt;/span&gt;d26149b8dc15c0c3ea8a5316583757f69b39e037, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.32, stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;checksec &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;file &lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;dubblesort 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;](&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;images&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pwnabletw&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dubblesort&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/capang/Desktop/CTF/pwnable.tw/dubblesort/dubblesort&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Arch:       i386&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;little
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RELRO:      Full RELRO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack:      Canary found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NX:         NX enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PIE:        PIE enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RUNPATH:    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FORTIFY:    Enabled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Key Findings:-&lt;/p&gt;</description>
    </item>
    <item>
      <title>ASEAN Notes.iso Mustang Panda [Malware Analysis]</title>
      <link>http://localhost:1313/posts/asean-notes-iso-stately-taurus/</link>
      <pubDate>Sat, 25 Jan 2025 03:49:34 +0800</pubDate>
      <guid>http://localhost:1313/posts/asean-notes-iso-stately-taurus/</guid>
      <description>&lt;h1 id=&#34;malware-analysis-report-asean-notesiso-from-mustang-panda-campaign&#34;&gt;Malware Analysis Report: ASEAN Notes.iso from Mustang Panda Campaign&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-metadata&#34; data-lang=&#34;metadata&#34;&gt;Author: Capang
Date: 24-01-2025
Analysis Environment: Windows 10 VM
Associated Campaign: Mustang Panda ASEAN Notes.iso  
Ref: https://csirt-cti.net/2024/01/23/stately-taurus-targets-myanmar/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;
&lt;p&gt;The ASEAN Notes.iso file is a component of a Mustang Panda campaign targeting entities in Myanmar. The attack leverages DLL sideloading via a hijacked Microsoft GetCurrentRollback.exe process (renamed office.exe) to execute the malicious GetCurrentDeploy.dll. The malware establishes persistence through registry modification and attempts C2 communication with fallback infrastructure. Primary objectives include initial access, persistence, and command execution, with suspected espionage motivations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ACS24 Vietnam Team Teh Tarik Cendol Writeup</title>
      <link>http://localhost:1313/posts/acs24-team-writeup/</link>
      <pubDate>Fri, 24 Jan 2025 04:04:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/acs24-team-writeup/</guid>
      <description>&lt;h1 id=&#34;acs2024-quals-writeup-by-teh-tarik-cendol&#34;&gt;ACS2024 Quals Writeup by Teh Tarik Cendol&lt;/h1&gt;
&lt;p&gt;Note: This is a team writeup and improved by &lt;a href=&#34;https://www.linkedin.com/in/jeremy-phang-kah-chun/&#34;&gt;&lt;strong&gt;Jeremy&lt;/strong&gt;&lt;/a&gt;. Source : &lt;a href=&#34;https://github.com/fyrepaw13/ctf_writeups/blob/main/ACS2024/README.md&#34;&gt;Jeremy&amp;rsquo;s Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Auditno-name-minor&#34;&gt;Audit/no-name minor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RevCS1338-Script-Programming&#34;&gt;Rev/CS1338: Script Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RevSecure-Chat&#34;&gt;Rev/Secure Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#WebCan-You-REDIRECT-Me&#34;&gt;Web/Can You REDIRECT Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscDrone-Hijacking&#34;&gt;Misc/Drone Hijacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscLutella&#34;&gt;Misc/Lutella&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscHi-Alien&#34;&gt;Misc/Hi Alien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CryptoSecret-Encrypt&#34;&gt;Crypto/Secret Encrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;auditno-name-minor&#34;&gt;Audit/no-name minor&lt;/h1&gt;
&lt;p&gt;This was a challenge similar to the one I created for Battle of Hackers 2024 so we solved it relatively fast. The challenge provides us with a binary that presents a menu that allows the user to borrow a loan, repay the loan, mining for money, buy a name and change name.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubar Parlimen [Malware Analysis]</title>
      <link>http://localhost:1313/posts/bubar-parlimen/</link>
      <pubDate>Thu, 23 Jan 2025 10:36:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/bubar-parlimen/</guid>
      <description>&lt;p&gt;A &lt;code&gt;bubarparlimen.docx&lt;/code&gt; file with an external &lt;code&gt;RemoteLoad.dotm&lt;/code&gt; attached template file where it contains malicious VBA Macro which will write &lt;code&gt;PE&lt;/code&gt; files, fetch &lt;code&gt;.exe&lt;/code&gt; + &lt;code&gt;.dll&lt;/code&gt; file and executing it in the infected machine. The macro uses base64 encoding method and constructing the encoded string little by little to avoid suspicion.&lt;/p&gt;
&lt;h2 id=&#34;2-case-details&#34;&gt;2. Case Details&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;File Name&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;bubarparlimen.docx&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;File Size&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;214.91 KiB&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;File Type&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Microsoft Office Word(15.0000)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;MD5&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;afbe00e755a2cf963f0eedbb4e310198&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;SHA1&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;a55bd3f15ce743c9cda7bec05afe50b9aefa4683&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;SHA256&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ab541df861c6045a17006969dac074a7d300c0a8edd0a5815c8b871b62ecdda7&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Created Time&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;15/5/2024 11:47:03 PM&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;File Name&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;RemoteLoad.dotm&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;File Size&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;23.76 KiB&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;File Type&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Microsoft Office Word(15.0000)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;MD5&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;8114e5e15d4086843cf33e3fca7c945b&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;SHA1&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;5f7f0b1419448c5fe1a8051ac8cb2cf7b95a3ffa&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;SHA256&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;145daf50aefb7beec32556fd011e10c9eaa71e356649edfce4404409c1e8fa30&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Created Time&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;15/5/2024 11:52:02 PM&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-case-specific-requirements&#34;&gt;3. Case Specific Requirements&lt;/h2&gt;
&lt;h3 id=&#34;machine&#34;&gt;Machine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows Environment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hashmyfiles&lt;/li&gt;
&lt;li&gt;olevba&lt;/li&gt;
&lt;li&gt;Microsoft Word&lt;/li&gt;
&lt;li&gt;CyberChef&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-static-analysis&#34;&gt;4. Static Analysis&lt;/h2&gt;
&lt;h3 id=&#34;41-bubarparlimendocx&#34;&gt;4.1 bubarparlimen.docx&lt;/h3&gt;
&lt;p&gt;bubarparlimen.docx is a &lt;code&gt;.docx&lt;/code&gt;. To go further into the analysis, it is necessary to understand what &lt;code&gt;.docx&lt;/code&gt; structure is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Morpheus MCC23 [B2R]</title>
      <link>http://localhost:1313/posts/thm-mcc23/</link>
      <pubDate>Thu, 23 Jan 2025 10:27:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/thm-mcc23/</guid>
      <description>&lt;p&gt;Morpheus is a THM box created for MCC 2023 registration. I am not a MCC 2023 candidate but this is my take on this box :3&lt;/p&gt;
&lt;h1 id=&#34;initial-recon&#34;&gt;Initial Recon&lt;/h1&gt;
&lt;h2 id=&#34;nmap&#34;&gt;Nmap&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nmap -sC -sV 10.10.13.181 -oA nmap/initial
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-01-11 05:56 EST
Nmap scan report for 10.10.13.181
Host is up (0.24s latency).
Not shown: 997 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:10.18.22.45
|      Logged in as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session timeout in seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 4
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_-rw-r--r--    1 65534    65534     1075835 May 27  2023 CONFIDENTIAL.pdf
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c9:c9:90:01:44:d3:be:ce:8f:ed:9d:f5:79:fe:1d:01 (RSA)
|   256 67:43:55:86:5a:6b:db:80:13:68:d1:ee:0f:76:8d:47 (ECDSA)
|_  256 8c:e1:85:36:1d:ba:77:05:95:36:4e:c3:3b:33:aa:5c (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-title: Apache2 Ubuntu Default Page: It works
|_http-server-header: Apache/2.4.29 (Ubuntu)
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 48.88 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Based on our port scanning result, there is a web server. Time to look into it&lt;/p&gt;</description>
    </item>
    <item>
      <title>DreamHack Wargames Format String [PWN]</title>
      <link>http://localhost:1313/posts/dh-format-string/</link>
      <pubDate>Thu, 23 Jan 2025 10:27:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/dh-format-string/</guid>
      <description>&lt;p&gt;This is an easy level challenge introducing Format String Vulnerability. The method used to solve this challenge is leaking any function address and find the base address for the system. With the known base address, we can overwrite a global variable into wanted value.&lt;/p&gt;
&lt;h1 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h1&gt;
&lt;h2 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h2&gt;
&lt;h3 id=&#34;checking-file-type&#34;&gt;Checking File type&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file fsb_overwrite
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fsb_overwrite: ELF 64-bit LSB pie executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;ecbb8000934a34b30ea8deb3a7675e08f8a44cda, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;File type analysis&lt;/p&gt;</description>
    </item>
    <item>
      <title>IHack24 Morse Encoder [PWN]</title>
      <link>http://localhost:1313/posts/ihack-morse-encoder/</link>
      <pubDate>Thu, 23 Jan 2025 10:26:49 +0800</pubDate>
      <guid>http://localhost:1313/posts/ihack-morse-encoder/</guid>
      <description>&lt;p&gt;This is the first challenge released during I-Hack 2024 Qualifier and I am so excited seeing the announcement of the challenge release. My adrenaline suddenly spike like crazy and more crazier I managed to get First Blood for this challenge&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;First Blood&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/morseencoder-ihack24/firstblood.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This challenge involves understanding of basic ROP and Shellcode Injection for ELF x86.  The binary has no protection and the address of the input buffer were given. I would say a great challenge for beginners in PWN / Binary Exploitation&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUCTF5 Vector Overflow [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-vector-overflow/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-vector-overflow/</guid>
      <description>&lt;p&gt;This challenge involves understanding on how Vector Variable were stored in memory for C++. The program able to overflow the Vector Pointer to change where it points to.&lt;/p&gt;
&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;
&lt;h3 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h3&gt;
&lt;p&gt;To know more about the given executable, we can use &lt;code&gt;file&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file vector_overflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector_overflow: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;4a0b824c662ee47b5cd3e73176c0092f1fcf714b, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Key Findings:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;64-bit executable&lt;/li&gt;
&lt;li&gt;not stripped means the executable has not had its symbol table and relocation information removed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;executable-security-check&#34;&gt;Executable Security Check&lt;/h3&gt;
&lt;p&gt;To figure out what security mitigations enabled in this executable, we can use &lt;code&gt;checksec&lt;/code&gt; command that comes with &lt;code&gt;pwntools&lt;/code&gt; library&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUCTF5 Yawa [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-yawa/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-yawa/</guid>
      <description>&lt;p&gt;This challenge involves exploiting buffer overflow and format string vulnerabilities. The buffer overflow allows us to leverage the format string &lt;code&gt;%s&lt;/code&gt; to leak addresses. Additionally, this challenge includes a return-to-libc (ret2libc) attack.&lt;/p&gt;
&lt;h3 id=&#34;intial-analysis&#34;&gt;Intial Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge we were given 4 different files.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;yawa (challenge executable)&lt;/li&gt;
&lt;li&gt;yawa.c (challenge source code)&lt;/li&gt;
&lt;li&gt;ld-2.35.so (dynamic linker/loader for the GNU C Library version 2.35)&lt;/li&gt;
&lt;li&gt;libc.so.6 (main shared library for the GNU C Library)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When initially received executable, yawa cannot be run due the executable requirements using specific linker and main shared library. Using &lt;code&gt;pwninit&lt;/code&gt; (&lt;a href=&#34;https://github.com/io12/pwninit)&#34;&gt;https://github.com/io12/pwninit)&lt;/a&gt;, the patching process becomes much easier. Now with the patched binary, it can now be run.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSCTF Lib Riddle [PWN]</title>
      <link>http://localhost:1313/posts/osctf-libriddle/</link>
      <pubDate>Thu, 23 Jan 2025 10:22:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/osctf-libriddle/</guid>
      <description>&lt;p&gt;This security challenge focuses on exploiting a buffer overflow vulnerability within a provided program file. Using knowledge on Linux calling conventions and Return Oriented Programming (ROP) to achieve the exploit. The ultimate goal is to perform a Ret-2-libC attack without access to the exact LibC library file used by the program.&lt;/p&gt;
&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;Welcome to Lib-Riddle, where the library holds a secret deep inside its stacks. In this hilarious and intriguing challenge, you&amp;rsquo;ll sift through piles of books and quirky clues to uncover the hidden mystery. Can you crack the code and reveal the library&amp;rsquo;s best-kept secret? Dive in and let the quest for knowledge begin!&lt;/p&gt;</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Thu, 23 Jan 2025 09:18:40 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text, and this is &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; website!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TargetMode=&amp;#34;External&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;asdad
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
