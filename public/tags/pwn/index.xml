<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PWN on Irfan Haziq&#39;s Site</title>
    <link>http://localhost:1313/tags/pwn/</link>
    <description>Recent content in PWN on Irfan Haziq&#39;s Site</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Jan 2025 04:04:31 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ACS24 Vietnam Team Teh Tarik Cendol Writeup</title>
      <link>http://localhost:1313/posts/acs24-team-writeup/</link>
      <pubDate>Fri, 24 Jan 2025 04:04:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/acs24-team-writeup/</guid>
      <description>&lt;h1 id=&#34;acs2024-quals-writeup-by-teh-tarik-cendol&#34;&gt;ACS2024 Quals Writeup by Teh Tarik Cendol&lt;/h1&gt;
&lt;p&gt;Note: This is a team writeup and improved by &lt;a href=&#34;https://www.linkedin.com/in/jeremy-phang-kah-chun/&#34;&gt;&lt;strong&gt;Jeremy&lt;/strong&gt;&lt;/a&gt;. Source : &lt;a href=&#34;https://github.com/fyrepaw13/ctf_writeups/blob/main/ACS2024/README.md&#34;&gt;Jeremy&amp;rsquo;s Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Auditno-name-minor&#34;&gt;Audit/no-name minor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RevCS1338-Script-Programming&#34;&gt;Rev/CS1338: Script Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RevSecure-Chat&#34;&gt;Rev/Secure Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#WebCan-You-REDIRECT-Me&#34;&gt;Web/Can You REDIRECT Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscDrone-Hijacking&#34;&gt;Misc/Drone Hijacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscLutella&#34;&gt;Misc/Lutella&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MiscHi-Alien&#34;&gt;Misc/Hi Alien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CryptoSecret-Encrypt&#34;&gt;Crypto/Secret Encrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;auditno-name-minor&#34;&gt;Audit/no-name minor&lt;/h1&gt;
&lt;p&gt;This was a challenge similar to the one I created for Battle of Hackers 2024 so we solved it relatively fast. The challenge provides us with a binary that presents a menu that allows the user to borrow a loan, repay the loan, mining for money, buy a name and change name.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DreamHack Wargames Format String [PWN]</title>
      <link>http://localhost:1313/posts/dh-format-string/</link>
      <pubDate>Thu, 23 Jan 2025 10:27:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/dh-format-string/</guid>
      <description>&lt;p&gt;This is an easy level challenge introducing Format String Vulnerability. The method used to solve this challenge is leaking any function address and find the base address for the system. With the known base address, we can overwrite a global variable into wanted value.&lt;/p&gt;
&lt;h1 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h1&gt;
&lt;h2 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h2&gt;
&lt;h3 id=&#34;checking-file-type&#34;&gt;Checking File type&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file fsb_overwrite
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fsb_overwrite: ELF 64-bit LSB pie executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;ecbb8000934a34b30ea8deb3a7675e08f8a44cda, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;File type analysis&lt;/p&gt;</description>
    </item>
    <item>
      <title>IHack24 Morse Encoder [PWN]</title>
      <link>http://localhost:1313/posts/ihack-morse-encoder/</link>
      <pubDate>Thu, 23 Jan 2025 10:26:49 +0800</pubDate>
      <guid>http://localhost:1313/posts/ihack-morse-encoder/</guid>
      <description>&lt;p&gt;This is the first challenge released during I-Hack 2024 Qualifier and I am so excited seeing the announcement of the challenge release. My adrenaline suddenly spike like crazy and more crazier I managed to get First Blood for this challenge&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;First Blood&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/morseencoder-ihack24/firstblood.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;This challenge involves understanding of basic ROP and Shellcode Injection for ELF x86.  The binary has no protection and the address of the input buffer were given. I would say a great challenge for beginners in PWN / Binary Exploitation&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUCTF5 Vector Overflow [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-vector-overflow/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-vector-overflow/</guid>
      <description>&lt;p&gt;This challenge involves understanding on how Vector Variable were stored in memory for C++. The program able to overflow the Vector Pointer to change where it points to.&lt;/p&gt;
&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;
&lt;h3 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h3&gt;
&lt;p&gt;To know more about the given executable, we can use &lt;code&gt;file&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file vector_overflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector_overflow: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;4a0b824c662ee47b5cd3e73176c0092f1fcf714b, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Key Findings:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;64-bit executable&lt;/li&gt;
&lt;li&gt;not stripped means the executable has not had its symbol table and relocation information removed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;executable-security-check&#34;&gt;Executable Security Check&lt;/h3&gt;
&lt;p&gt;To figure out what security mitigations enabled in this executable, we can use &lt;code&gt;checksec&lt;/code&gt; command that comes with &lt;code&gt;pwntools&lt;/code&gt; library&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUCTF5 Yawa [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-yawa/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-yawa/</guid>
      <description>&lt;p&gt;This challenge involves exploiting buffer overflow and format string vulnerabilities. The buffer overflow allows us to leverage the format string &lt;code&gt;%s&lt;/code&gt; to leak addresses. Additionally, this challenge includes a return-to-libc (ret2libc) attack.&lt;/p&gt;
&lt;h3 id=&#34;intial-analysis&#34;&gt;Intial Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge we were given 4 different files.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;yawa (challenge executable)&lt;/li&gt;
&lt;li&gt;yawa.c (challenge source code)&lt;/li&gt;
&lt;li&gt;ld-2.35.so (dynamic linker/loader for the GNU C Library version 2.35)&lt;/li&gt;
&lt;li&gt;libc.so.6 (main shared library for the GNU C Library)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When initially received executable, yawa cannot be run due the executable requirements using specific linker and main shared library. Using &lt;code&gt;pwninit&lt;/code&gt; (&lt;a href=&#34;https://github.com/io12/pwninit)&#34;&gt;https://github.com/io12/pwninit)&lt;/a&gt;, the patching process becomes much easier. Now with the patched binary, it can now be run.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSCTF Lib Riddle [PWN]</title>
      <link>http://localhost:1313/posts/osctf-libriddle/</link>
      <pubDate>Thu, 23 Jan 2025 10:22:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/osctf-libriddle/</guid>
      <description>&lt;p&gt;This security challenge focuses on exploiting a buffer overflow vulnerability within a provided program file. Using knowledge on Linux calling conventions and Return Oriented Programming (ROP) to achieve the exploit. The ultimate goal is to perform a Ret-2-libC attack without access to the exact LibC library file used by the program.&lt;/p&gt;
&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;Welcome to Lib-Riddle, where the library holds a secret deep inside its stacks. In this hilarious and intriguing challenge, you&amp;rsquo;ll sift through piles of books and quirky clues to uncover the hidden mystery. Can you crack the code and reveal the library&amp;rsquo;s best-kept secret? Dive in and let the quest for knowledge begin!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
