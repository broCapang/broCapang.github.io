<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DUCTF5 on Capang&#39;s Site</title>
    <link>http://localhost:1313/tags/ductf5/</link>
    <description>Recent content in DUCTF5 on Capang&#39;s Site</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2025 10:23:44 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ductf5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DUCTF5 Vector Overflow [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-vector-overflow/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-vector-overflow/</guid>
      <description>&lt;p&gt;This challenge involves understanding on how Vector Variable were stored in memory for C++. The program able to overflow the Vector Pointer to change where it points to.&lt;/p&gt;
&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;
&lt;h3 id=&#34;file-analysis&#34;&gt;File Analysis&lt;/h3&gt;
&lt;p&gt;To know more about the given executable, we can use &lt;code&gt;file&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file vector_overflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector_overflow: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;4a0b824c662ee47b5cd3e73176c0092f1fcf714b, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Key Findings:-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;64-bit executable&lt;/li&gt;
&lt;li&gt;not stripped means the executable has not had its symbol table and relocation information removed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;executable-security-check&#34;&gt;Executable Security Check&lt;/h3&gt;
&lt;p&gt;To figure out what security mitigations enabled in this executable, we can use &lt;code&gt;checksec&lt;/code&gt; command that comes with &lt;code&gt;pwntools&lt;/code&gt; library&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUCTF5 Yawa [PWN]</title>
      <link>http://localhost:1313/posts/ductf5-yawa/</link>
      <pubDate>Thu, 23 Jan 2025 10:23:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/ductf5-yawa/</guid>
      <description>&lt;p&gt;This challenge involves exploiting buffer overflow and format string vulnerabilities. The buffer overflow allows us to leverage the format string &lt;code&gt;%s&lt;/code&gt; to leak addresses. Additionally, this challenge includes a return-to-libc (ret2libc) attack.&lt;/p&gt;
&lt;h3 id=&#34;intial-analysis&#34;&gt;Intial Analysis&lt;/h3&gt;
&lt;p&gt;In this challenge we were given 4 different files.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;yawa (challenge executable)&lt;/li&gt;
&lt;li&gt;yawa.c (challenge source code)&lt;/li&gt;
&lt;li&gt;ld-2.35.so (dynamic linker/loader for the GNU C Library version 2.35)&lt;/li&gt;
&lt;li&gt;libc.so.6 (main shared library for the GNU C Library)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When initially received executable, yawa cannot be run due the executable requirements using specific linker and main shared library. Using &lt;code&gt;pwninit&lt;/code&gt; (&lt;a href=&#34;https://github.com/io12/pwninit)&#34;&gt;https://github.com/io12/pwninit)&lt;/a&gt;, the patching process becomes much easier. Now with the patched binary, it can now be run.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
